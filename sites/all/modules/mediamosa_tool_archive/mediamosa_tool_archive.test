<?php
/**
 * @file
 * Job tests for archive tool related functions.
 */

class MediaMosaToolArchiveTestCaseEga extends MediaMosaTestCaseEgaJob {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Tools - Archive',
      'description' => 'Test the archive tool.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_TOOLS,
      mediamosa_settings::MEDIAMOSA_RUN => mediamosa_settings::MEDIAMOSA_RUN_DAILY,
    );
  }

  /**
   * Implements setUp().
   */
  protected function setUp() {
    parent::setUp('mediamosa_tool_archive');
  }

  /**
   * Test an image still generation.
   */
  public function testArchiveCreation() {

    // Upload image file.
    $filename = drupal_get_path('module', 'mediamosa') . '/lib/testfiles/notblack-001.jpeg';
    $upload = $this->uploadTestFile(array('filename' => $filename));
    $asset_id = $upload['asset_id'];

    /*
    $mediafile_id = $upload['mediafile_id'];
    $parameters = array('still_type' => 'NONE');
    $this->createMediafileStill($mediafile_id, $parameters);

    // Parse the queue.
    $this->doQueueCycleAll();

    $asset = $this->getAssetMediafile($asset_id);
    */

    // Parameters for assets/download.
    $parameters = array(
      mediamosa_rest_call_assets_download::USER_ID => self::SIMPLETEST_USER_ID,
      mediamosa_rest_call_assets_download::ASSET_ID . '[]' => $asset_id,
      mediamosa_rest_call_assets_download::PROFILE => 0,
      mediamosa_rest_call_assets_download::FILENAME => 'foo.zip',
    );
    print_r($parameters);

    // Do Post call.
    $response = $this->restCall('archive/create', $parameters, array(), array(mediamosa_error::ERRORCODE_OKAY), FALSE);
    print_r($response); die();

    /*
    $this->var_export($response);
    $item = $response->xpath('items/item');
    $item = reset($item);
    $this->var_export($item);
    $this->assertTrue(!empty($item->output), 'Got still');
    */
  }
}
