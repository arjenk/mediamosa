<?php
/**
 * @file
 * Unittests for mediafile download.
 */

class MediaMosaAssetMediafileDownloadTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Mediafile - download tests',
      'description' => 'Testing asset mediafile download related functions and rest calls.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_ASSET_MEDIAFILE,
      mediamosa_settings::MEDIAMOSA_RUN => mediamosa_settings::MEDIAMOSA_RUN_15_MINUTES,
    );
  }

  // ------------------------------------------------------------------ Tests.

  // Testing asset mediafile delete, see: ticket 619.
  function testMediafileDownload() {

    //
    // Make a mediafile with is_downloadable = TRUE.
    //

    $upload = $this->uploadTestFile(array('downloadable' => TRUE));
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    // Get the mediafile.
    $mediafile = $this->getMediafile($mediafile_id);

    // Check the values.
    foreach (array(mediamosa_asset_mediafile_db::IS_DOWNLOADABLE => mediamosa_asset_mediafile_db::IS_DOWNLOADABLE_TRUE) as $key => $value) {
      $this->assertTrue(
        $mediafile[$key] == $value,
        t("The @key has the good value (@value) after change.", array('@key' => $key, '@value' => $value))
      );
    }

    // Touch a temporary mediafile.
    $mediafile_uri = mediamosa_storage::get_uri_mediafile($mediafile);
    $is_touched = mediamosa_io::touch($mediafile_uri);
    $this->assertTrue(
      $is_touched,
      t('Create an empty mediafile on SAN/NAS: @filename', array('@filename' => mediamosa_io::realpath_safe($mediafile_uri)))
    );

    // Ask mediafile download url.
    $parameters = array(
      mediamosa_rest_call_media_view::RESPONSE => mediamosa_media::RESPONSE_DOWNLOAD,
      mediamosa_rest_call_media_view::MEDIAFILE_ID => $mediafile_id,
    );
    $xml = $this->do_media_view($asset_id, $parameters);

    // Check the download url.
    $download = (string) $xml->items->item->output;
    $this->assertTrue(
      !empty($download),
      t('Download url is exists: @download', array('@download' => $download))
    );

    $this->var_export($download);

    // Download the file.
    $result = mediamosa_http::drupal_http_request($download);

    $this->var_export($result->headers);
    $this->var_export($_SERVER);
    if (isset($_SERVER['REDIRECT_STATUS'])) {
      $this->assertTrue($_SERVER['REDIRECT_STATUS'] == 200, 'Got 200 HTTP response download.');
    }
    $this->assertTrue($result->headers['content-type'] == 'application/octet-stream', 'Got download.');

    // Set acl.

    // Set access to self only.
    $this->setMediafileAcl($mediafile_id, array('acl_user' => array(self::SIMPLETEST_USER_ID)));

    // Ask mediafile download url.
    $parameters = array(
      mediamosa_rest_call_media_view::RESPONSE => mediamosa_media::RESPONSE_DOWNLOAD,
      mediamosa_rest_call_media_view::MEDIAFILE_ID => $mediafile_id,
    );
    $xml = $this->do_media_view($asset_id, $parameters);

    // Check the download url.
    $download = (string) $xml->items->item->output;
    $this->assertTrue(
      !empty($download),
      t('Download url is exists: @download', array('@download' => $download))
    );

    $this->var_export($download);

    // Download the file.
    $result = mediamosa_http::drupal_http_request($download);

    $this->var_export($result->headers);
    $this->var_export($_SERVER);
    if (isset($_SERVER['REDIRECT_STATUS'])) {
      $this->assertTrue($_SERVER['REDIRECT_STATUS'] == 200, 'Got 200 HTTP response download.');
    }
    $this->assertTrue($result->headers['content-type'] == 'application/octet-stream', 'Got response download.');

    $this->deleteMediafileAcl($mediafile_id);

    //
    // Change the mediafile to is_downloadable = FALSE.
    //

    // Change the mediafile.
    $parameters = array(
      mediamosa_rest_call_create_mediafile::IS_DOWNLOADABLE => 'FALSE',
    );
    $this->updateMediafile($mediafile_id, $parameters);

    // Get the mediafile.
    $mediafile = $this->getMediafile($mediafile_id);

    // Check the values.
    foreach ($parameters as $key => $value) {
      $this->assertTrue(
        $mediafile[$key] == $value,
        t("The @key has the good value (@value) after change.", array('@key' => $key, '@value' => $value))
      );
    }

    // Ask mediafile download url.
    $parameters = array(
      mediamosa_rest_call_media_view::RESPONSE => mediamosa_media::RESPONSE_DOWNLOAD,
      mediamosa_rest_call_media_view::MEDIAFILE_ID => $mediafile_id,
    );
    $xml = $this->do_media_view($asset_id, $parameters, array(mediamosa_error::ERRORCODE_MEDIAFILE_DOWNLOAD_DISABLED));

    //
    // Delete temporary items.
    //

    // Delete the temporary mediafile.
    if ($is_touched) {
      $this->assertTrue(
        mediamosa_io::unlink($mediafile_uri),
        t('Delete the mediafile on SAN/NAS: @filename', array('@filename' => mediamosa_io::realpath_safe($mediafile_uri)))
      );
    }

    // Docx upload check.
    $upload = $this->uploadTestFile(array(
      'downloadable' => TRUE,
      'filename' => $this->getTestDoc_Docx()
    ));
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    // Get the mediafile.
    $mediafile = $this->getMediafile($mediafile_id);

    // Check the values.
    foreach (array(mediamosa_asset_mediafile_db::IS_DOWNLOADABLE => mediamosa_asset_mediafile_db::IS_DOWNLOADABLE_TRUE) as $key => $value) {
      $this->assertTrue(
        $mediafile[$key] == $value,
        t("The @key has the good value (@value) after change.", array('@key' => $key, '@value' => $value))
      );
    }

    // Ask mediafile download url.
    $parameters = array(
      mediamosa_rest_call_media_view::RESPONSE => mediamosa_media::RESPONSE_DOWNLOAD,
      mediamosa_rest_call_media_view::MEDIAFILE_ID => $mediafile_id,
    );
    $xml = $this->do_media_view($asset_id, $parameters);

    // Check the download url.
    $download = (string) $xml->items->item->output;
    $this->assertTrue(
      !empty($download),
      t('Download url is exists: @download', array('@download' => $download))
    );

    $this->var_export($download);

    // Download the file.
    $result = mediamosa_http::drupal_http_request($download);

    $this->var_export($result->headers);
    $this->var_export($_SERVER);
    if (isset($_SERVER['REDIRECT_STATUS'])) {
      $this->assertTrue($_SERVER['REDIRECT_STATUS'] == 200, 'Got 200 HTTP response download.');
    }
    $this->assertTrue($result->headers['content-type'] == 'application/octet-stream', 'Got download.');
    $this->assertTrue(mediamosa_unicode::strpos($result->headers['content-disposition'], '.docx"') !== FALSE, 'Is correct extension.');

    // Update the mediafile to our filename and see if it downloads.
    $this->updateMediafile($mediafile_id, array(
      'filename' => 'toestemming cafÃ© De Broodwinning BOSG20173183 20171011 - Varkensmarkt 4.msg',
      'mime_type' => 'CDF V2 Document, No summary info',
    ));

    // Hard update the file extension.
    mediamosa_db::db_update(mediamosa_asset_mediafile_db::TABLE_NAME)
      ->fields(array(mediamosa_asset_mediafile_db::FILE_EXTENSION => 'msg'))
      ->condition(mediamosa_asset_mediafile_db::ID, $mediafile_id)
      ->execute();

    // Ask mediafile download url.
    $parameters = array(
      mediamosa_rest_call_media_view::RESPONSE => mediamosa_media::RESPONSE_DOWNLOAD,
      mediamosa_rest_call_media_view::MEDIAFILE_ID => $mediafile_id,
    );
    $xml = $this->do_media_view($asset_id, $parameters);

    // Check the download url.
    $download = (string) $xml->items->item->output;
    $this->assertTrue(
      !empty($download),
      t('Download url is exists: @download', array('@download' => $download))
    );

    $this->var_export($download);

    // Download the file.
    $result = mediamosa_http::drupal_http_request($download);

    $this->var_export($result->headers);
    if (isset($_SERVER['REDIRECT_STATUS'])) {
      $this->assertTrue($_SERVER['REDIRECT_STATUS'] == 200, 'Got 200 HTTP response download.');
    }
    $this->assertTrue($result->headers['content-type'] == 'application/octet-stream', 'Got download.');
    $this->assertTrue(mediamosa_unicode::strpos($result->headers['content-disposition'], '.msg"') !== FALSE, 'Is correct extension.');
  }
}
